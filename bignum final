def head(l):
    return l[0]

def tail(l):
    return l[1:]

def empty(l):
    return len(l) == 0

def attach(d, l):
    return [d] + l

def reverse(l):
    rev_list = []
    while not empty(l):
        rev_list = attach(head(l), rev_list)
        l = tail(l)
    return rev_list

def index(lst, i):
    if i == 0:
        return head(lst)
    else:
        return index(tail(lst), i-1)

def add_lists(l1, l2):
    result = []
    carry = 0
    while not (empty(l1) and empty(l2)):
        if not empty(l1):
            d1 = head(l1)
            l1 = tail(l1)
        else:
            d1 = 0
        if not empty(l2):
            d2 = head(l2)
            l2 = tail(l2)
        else:
            d2 = 0
        s = d1 + d2 + carry
        result = attach(s % 10, result)
        carry = s // 10
    if carry:
        result = attach(carry, result)
    return reverse(result)

def subtract_lists(l1, l2):
    if equal(a,b):
        return [0]
    result = []
    borrow = 0
    while not (empty(l1) and empty(l2)):
        if not empty(l1):
            d1 = head(l1)
            l1 = tail(l1)
        else:
            d1 = 0
        if not empty(l2):
            d2 = head(l2)
            l2 = tail(l2)
        else:
            d2 = 0
        s = d1 - d2 - borrow
        if s < 0:
            s += 10
            borrow = 1
        else:
            borrow = 0
        result = attach(s, result)
    while head(result) == 0:
        result = tail(result)
    return reverse(result)

def duplicate_list(a):
    if empty(a):
        return []
    else:
        return attach(head(a), duplicate_list(tail(a)))

def mod(a, b):
    a_copy = duplicate_list(a)
    while leq(b, a_copy):
        a_copy = subtract_lists(a_copy, b)
    return a_copy

def compare(a, b):
    if len(a) > len(b):
        return 1
    elif len(a) < len(b):
        return -1
    else:
        for i in range(len(a)-1, -1, -1):
            if index(a, i) > index(b, i):
                return 1
            elif index(a, i) < index(b, i):
                return -1
        return 0

def leq(a, b):
    if len(a) < len(b):
        return True
    if len(a) > len(b):
        return False
    for i in range(len(a)-1, -1, -1):
        if index(a, i) < index(b, i):
            return True
        if index(a, i) > index(b, i):
            return False
    return True

def mod2a(a):
    if head(a) in {1, 3, 5, 7, 9}:
        return [1]
    else:
        return [0]
    
def append(a, b):
    if empty(a):
        return b
    else:
        return attach(head(a), append(tail(a), b))

def int_mult(x, lst, carry, prod):
    if empty(lst) and carry == 0:
        return prod
    elif empty(lst):
        return int_mult(x, [], carry // 10, append(prod, [carry % 10]))
    else:
        return int_mult(x, tail(lst), (head(lst) * x + carry) // 10, append(prod, [(head(lst) * x + carry) % 10]))

def mult(a, b):
    if empty(a):
        return int_mult(0, b, 0, [])
    else:
        return add_lists(int_mult(head(a), b, 0, []), int_mult(10, mult(tail(a), b), 0, []))

def equal(a, b):
    return a == b

def divide(a, b):
    if equal(b, [0]):
        raise ZeroDivisionError
    elif leq(a, b) and not equal(a, b):
        return a
    else:
        quot = []
        while True:
            if leq(subtract_lists(a, b), b) and not equal(subtract_lists(a, b), b):
                quot = add_lists(quot, [1])
                break
            elif equal(subtract_lists(a, b), b):
                quot = add_lists(quot, [2])
                break
            else:
                a = subtract_lists(a, b)
                quot = add_lists(quot, [1])
        return quot
    
######################################## KARATSUBA BELOW THIS w############################################################
    
def get_element_at(lst, pos):
    if pos == 0:
        return head(lst)
    else:
        return get_element_at(tail(lst), pos - 1)

def custom_split(num, length):
    def split_helper(num, length, count, left, right):
        if count == length:
            return left, [head(num)] + right
        else:
            return split_helper(tail(num), length, count+1, left + [head(num)], right)

    head_left, head_right = split_helper(num, length, 1, [head(num)], [])
    return head_left, tail(head_right)
    

def iter(upper, lower, length=None):
    if length is None:
        return lower, upper
    if length and upper:
        return iter(tail(upper), lower + [head(upper)], length-1)
    else:
        return lower, upper
    
def normalise(a, b):
    a_len = len(a)
    b_len = len(b)
    
    if a_len > b_len:
        b = [0] * (a_len - b_len) + b
    elif a_len < b_len:
        a = [0] * (b_len - a_len) + a

    return a, b

def shorten(lst):
    def remove_trailing_zeros(reversed_lst):
        if empty(reversed_lst) or head(reversed_lst) != 0:
            return reversed_lst
        else:
            return remove_trailing_zeros(tail(reversed_lst))

    return reverse(remove_trailing_zeros(reverse(lst)))

def rightshift(lst, steps):
    if steps == 0:
        return lst
    else:
        return [0] * steps + lst
    
def subtract(l1, l2):
    if equal(a, b):
        return [0]
    result = []
    borrow = 0
    while not (empty(l1) and empty(l2)):
        if not empty(l1):
            d1 = head(l1)
            l1 = tail(l1)
        else:
            d1 = 0
        if not empty(l2):
            d2 = head(l2)
            l2 = tail(l2)
        else:
            d2 = 0
        s = d1 - d2 - borrow
        if s < 0:
            s += 10
            borrow = 1
        else:
            borrow = 0
        result = attach(s, result)
    result = reverse(result)
    while not empty(result) and head(result) == 0:
        result = tail(result)
    return result

def k_mult(a, b):
    if leq(a, [9]) or leq(b, [9]):
        result = get_element_at(a, 0) * get_element_at(b, 0)
        return [result // 10, result % 10] if result >= 10 else [result]
    else:
        a, b = normalise(a, b)
        length = len(a) // 2
        a1, a2 = custom_split(a, length)
        b1, b2 = custom_split(b, length)

        z0 = shorten(k_mult(a1, b1))
        z1 = shorten(k_mult(add_lists(a1, b2), add_lists(b1, a2)))
        z2 = shorten(k_mult(a2, b2))

        final_result = add_lists(add_lists(rightshift(z2, 2 * length), rightshift(shorten(subtract(z1, add_lists(z2, z0))), length)), z0)
        return final_result


a = [1, 5, 6, 8, 8, 5, 4, 3, 6, 4, 6]
b = [2, 5, 5, 4, 5, 3]

print(add_lists(a, b))
print(subtract_lists(a, b))
print(mult(a,b))
print(leq(a, b))
print(equal(a, b))
print(mod(a, b))
print(divide(a, b))
print(mod2a(a))
#print(k_mult(a,b))